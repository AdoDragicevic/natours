@import "./abstracts/functions";
@import "./abstracts/mixins";
@import "./abstracts/variables";

@import "./base/base";
@import "./base/animations";
@import "./base/typography";
@import "./base/utilities";

@import "./components/button";
@import "./components/header";
@import "./components/composition";
@import "./components/feature-box";
@import "./components/card";
@import "./components/story";
@import "./components/bg-video";
@import "./components/form";

@import "./layout/grid";
@import "./layout/footer";
@import "./layout/header";
@import "./layout/navigation";
@import "./layout/popup";

@import "./pages/home";

/*
About CSS

3 Pillars of Good CSS and HTML
  - responsive design
  - maintainable and scalable code
  - web performance

Responsive design principles
  - fluid layouts
    - float, flexbox, css-grid
  - responsive units
  - flexible imgs
  - media queries

How CSS works
  - CSS parsing has 2 steps:
    - resolve conflics (cascade)
    - calculate values (e.g. % to px)

Cascade
  - process of combining stylesheets and resolving conflicts when more than 1 rule applies to 1 el
  - sources: author, user, browser (default, e.g. <a></a> styles)
  - criteria for resolving conflicts:
    - importance (user !important, author !important, author, user, default)
    - specificity (inline, id, class, pseudo, attribute, el, pseudo-el)
    - order (last wins)

  Specificity
    - (inline: 0, id: 0, class: 0, el: 0)
    - universal selector (*) has no specificity value (0, 0, 0, 0)

  Order
    - always include your own stylesheet as last stylesheet in HTML

Values
  - each CSS property must have a value
  - each property has an initial value, used if nothing is declared and there is no inheritance
  - all values are converted to px
  - calculated based on the layout (screen size)
  - browsers specify default root font size (usually 16px)
  - order of precedence: specified, inherited, default
  - 'inherited' value can be use to add inheritance
  - 'initial' value can can be used to reset value to default

  How relative values (e.g. %) are calculated to px
    - % in fonts: measured relative to parents font-size; % x font-size of parent el
    - % in length: measured relative to parents width; reference is always parent el width, % x width of parent
    - em in fonts: reference is parent font-size
    - em in length: reference is current el font-size, e.g. 1.5rem = 1.5 x curr el font-size
    - rem (both in fonts and lengths): relevant to root font-size, e.g. 1.5 rem = 1.5 x 16px
    - vh: 1vh is 1% of viewport height
    - vw: 1vw is 1% of viewport width

Inheritance
  - usually properties related to text are inherited (font-size, line-height, color, font-family)
  - what gets inherited in the computed value, and not the declared value; i.e. inherited values are 
    already conputed! (instead of inheriting 120%, the computed value of 120% is inherited, while 120% 
    is calculated in the parent el, not the el that inherited the value)
  - 'inherited' value can be use to add inheritance

Visual Formating Model
  - algorithm that calculates boxes and determines their layout on the page (dimensions,
  type (inline/block/inline-block), position (floats, absolute position)...)

  Box Model
    - applies to block level boxes
    - each el can be seen as a box
    - content + padding + border + margin
    - fill area (includes everything inside border), gets filled with bg-color or bg-img
    - box width = left border + left padding + specified width + right padding + right border
    - box-sizing: border-box changes the above setting to:
      - paddings and borders are NOT added to the defined dimensions of the box
      - box widht = specified width
  Box Types
    - inline, block, inline-block
    - block
      - display: block
      - display: flex/table/list-item also produce block level el
      - occupies as much space as possible (usually whole line)
    - inline
      - display: inline
      - no height or width property
      - paddings and margins exist only on left and right side
      - takes the minimum space required for its content
    - inline-blcok
      - display: inline-block
      - inline el that work as block level el
    Positioning
      - normal flow / floats / absolute positioning
      - normal flows
        - what happens to el by default
      - floats
        - el is removed from its natural flow and shifted to left/right as far
          as possible, until it touches edge of containing box (or another float el)
        - inline elements will wrap around the floated el
        - container will not adjust its height to the floated el (sometimes can be
          problematic; solution is to use clear-fixes)
      - absolute / fixed
        - el is taken out of the normal flow
        - el does not 'communicate' with other el outside of it
        - absolute is positioned relative to first parent el with display:relative
        - fixed is positioned relative to root el
    Stacking context
      - layers of content
      - z-index
      - there are other propeties as alternative to z-index (e.g. opacity)

CSS Architecture

Think -> Build -> Architect
  - mindset
  - think about layout before writing code
  - build layout in HTML & CSS with consistent structure for naming classes (e.g. BEM)
  - create logical architecture for CSS with files and folders

Component driven design
  - divide page into modular reusable components
  - components building blocks for UI
  - components are held together by layout
  - components are reusable across projects
  - components are usually independant
  
BEM
  - every el is a class (low specificity -> clean and scalable code)
  - block__element--modifier
  - block: stand-alone component that is meaningful on its own; possibly reusable
  - element: part of block, has no standalone meaning
  - modifier: different verison of block or element (e.g. .btn--white)
  - e.g. <a class="recepie__btn btn btn--round"></a>

Architecture
  - logical files and folders structure
  - 7-1, it css, smacks, etc.
  - 7-1 pattern:
    - 1 main sass file to import all other files to
    - 7 folders:
      - base: basic project definitions
      - components: 1 file per reusable component
      - layout: website layout
      - pages: page specific styles
      - themes: e.g. dark/light mode
      - abstracts: code that doesn't output css (e.g. variables) 
      - vendors: third-party CSS

Pseudo class
- state of element, e.g.: :visited, :link, :hover

Pseudo element
- something on the page, e.g.: ::before, ::after, ::webkit-input-placeholder

Sass
  - compiler
  - gives us: variables, nesting, operators, partials, 
    imports, mixins, functions, extends, control directives (conditionals and loops)
  - 2 syntaxes: sass, scss
  - variables: $color-primary: #eee; color: $color-primary
  - functions: darken($color-white, 50%), lighten($color-gray-dark, 15%)
  - mixin: container for code that can be reused
    - @mixin myMixinName { }
    - @include mxMixinName;
    - mixins can accept arguments!
      - @mixin style-text($color) { color: $color; font-size: 22rem }
    - functions
      - build-in functions, e.g. darken(), lighten()
      - @function divide($a, $b) {
          @return $a / $b;
        }
      - @divide(60, 2) * 1px; // this will return 30px instead of 30
  - extend: we write a placeholder with styles in it and have another selector extend that placeholder
    - %btn-placeholder { }
    - @extend %btn-placeholder;
    - as opposed to mixin, the code is not copied inside selectors where mixing is called,
    - the selectors where extend is called are coppied to the code in the extend
    - you should only ever use extend if the selectors (to which tge ruels are extended) are thematically related,
      e.g. you use it inside .btn-lg and .btn-sm
    - othervise it's better to use mixins (for mainainability)
*/